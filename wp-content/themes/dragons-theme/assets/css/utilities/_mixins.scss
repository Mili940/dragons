/**************************************************
* Media query for device minimal width
**************************************************/
@mixin min-mq($var) {
  @media (min-width: #{$var}) {
    @content;
  }
}
/**************************************************
* Media query for device maximum width
**************************************************/
@mixin max-mq($var) {
  @media (max-width: #{$var}) {
    @content;
  }
}
/**************************************************
* Media query for device minimal and maximum width
**************************************************/
@mixin min-max-mq($min, $max) {
  @media (min-width: #{$min}) and (max-width: #{$max}) {
    @content;
  }
}

/**************************************************
* Row and container generator
**************************************************/
@mixin row-generator($suffix, $gutter) {
  @if $suffix != "" {
    $suffix: -#{$suffix};
  }
  .row#{$suffix} {
    display: flex;
    flex-wrap: wrap;
    margin-left: -#{$gutter};
    margin-right: -#{$gutter};
  }
}
@mixin container-generator($suffix, $gutter, $max-width) {
  @if $suffix != "" {
    $suffix: -#{$suffix};
  }
  .container#{$suffix} {
    width: 100%;
    max-width: #{$max-width};
    padding-left: #{$gutter};
    padding-right: #{$gutter};
    margin-left: auto;
    margin-right: auto;
  }
}
@mixin row-container-generator($suffix, $gutter, $max-width) {
  @include row-generator($suffix, $gutter);
  @include container-generator($suffix, $gutter, $max-width);
}

@mixin gridClasses(
  $gridColumns,
  $_prefix: "",
  $gutter: 15,
  $breakpoint: 0,
  $gridPrefix: ""
) {
  // grid classes
  @if $breakpoint != 0 {
    .#{$gridPrefix}col-#{$_prefix} {
      margin: 0;
      clear: none;
      width: 100%;
      max-width: 100%;
      padding-left: #{$gutter};
      padding-right: #{$gutter};
      @for $i from 1 through $gridColumns {
        &-#{$i} {
          @extend .#{$gridPrefix}col-#{$_prefix};
          @media (min-width: $breakpoint) {
            flex: 0 0 calc( ($i / $gridColumns) * 100% );
            max-width: calc( ($i / $gridColumns) * 100% );
          }
        }
      }
    }
    @media (min-width: $breakpoint) {
      .#{$_prefix}-offset-0 {
        margin-left: 0;
      }
      @for $i from 1 through $gridColumns {
        .#{$_prefix}-offset-#{$i} {
          margin-left: #{$i}#{"%"};
        }
      }
    }
  } @else {
    .#{$gridPrefix}col-#{$_prefix} {
      margin: 0;
      clear: none;
      width: 100%;
      max-width: 100%;
      padding-left: #{$gutter};
      padding-right: #{$gutter};
    }
  }
}

@mixin gridGenerator(
  $gridColumns: 12,
  $gutter: 15px,
  $breakpoints: (
    575,
    767,
    991,
    1199,
  ),
  $breakpointPrefixes: (
    xs,
    sm,
    md,
    lg,
  ),
  $gridPrefix: ""
) {
  @for $i from 1 through length($breakpointPrefixes) {
    $prefix: nth($breakpointPrefixes, $i);
    $breakpoint_min: nth($breakpoints, $i);

    // Add one to support pixel breakpoints, EMs don't need the extra bump

    $breakpoint_min: nth($breakpoints, $i);

    //   //* smallest breakpoint */

    //* middle breakpoints */
    //  @media (min-width: #{$breakpoint_min}#{$breakpointType}) {
    @include gridClasses(
      $gridColumns,
      $prefix,
      $gutter,
      #{$breakpoint_min},
      $gridPrefix
    );
    //  }
  }
}
